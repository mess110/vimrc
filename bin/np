#!/usr/bin/env ruby
# encoding: utf-8

require 'uri'
require 'net/http'
require 'openssl'
require 'json'
require 'pp'

class Api
  BASE_URL = "https://json.northpole.ro"

  def initialize(config)
    url = config['url']
    uri = URI.parse(url)
    @http = Net::HTTP.new(uri.host, uri.port)

    if url.start_with?('https')
      @http.use_ssl = true
      if config['skip_certificate_validation']
        @http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end
    end
  end

  def request(req, params)
    klass = constantize("Net::HTTP::#{req.capitalize}")
    request = klass.new("/storage.json")
    request.body = params.to_json
    @http.request(request).body
  end

  # http://apidock.com/rails/Inflector/constantize
  def constantize(camel_cased_word)
    unless /\A(?:::)?([A-Z]\w*(?:::[A-Z]\w*)*)\z/ =~ camel_cased_word
      raise NameError, "#{camel_cased_word.inspect} is not a valid constant name!"
    end

    Object.module_eval("::#{$1}", __FILE__, __LINE__)
  end

end

class Np
  def initialize(args)
    args.push('{}') if args.length == 1
    help if args.length != 2
    req = args[0]
    params = JSON.parse(args[1]) rescue help("invalid json #{params}")
    help unless ['get', 'post', 'put'].include?(req)
    apiReq = Api.new(config).request(req, params.merge(config['config']))
    log(apiReq, params)
  end

  def log(body, params)
    json = JSON.parse(body)
    s = params == {} ? json.collect{ |e| e['category'] }.uniq.reject{ |e| e == nil } : json
    pp s
  end

  def config
    rc_path = File.join(Dir.home, '.nprc')
    auth = { config: { api_key: 'guest', secret: 'guest' }, url: Api::BASE_URL, skip_certificate_validation: true }
    system "echo '#{auth.to_json}' > #{rc_path}" unless File.exists?(rc_path)
    JSON.parse(File.read(rc_path)) rescue help("invalid #{rc_path} contents")
  end

  def help(s=false)
    config
    puts "\n  #{s}" if s
    puts "\n  cli for json.northpole.ro"
    puts "\n  example usage:\n\n"
    puts '    np get \'{}\''
    puts '    np get|post|put \'{"json":"string"}\''
    puts "\n"
    exit 0
  end
end

Np.new(ARGV)
