#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import os
import sys
import urllib2


# https://openweathermap.org/weather-conditions
# https://emojipedia.org
icons = {
    'thunderstorm with light rain': '⛈️',
    'thunderstorm with heavy rain': '⛈️',
    'light thunderstorm': '🌩️',
    'thunderstorm': '🌩️',
    'heavy thunderstorm': '🌩️',
    'ragged thunderstorm': '🌩️',
    'thunderstorm with light drizzle': '⛈️',
    'thunderstorm with drizzle': '⛈️',
    'thunderstorm with heavy drizzle': '⛈️',

    'light intensity drizzle': '🌦️',
    'drizzle': '🌦️',
    'heavy intensity drizzle': '🌦️',
    'light intensity drizzle rain': '🌦️',
    'drizzle rain': '🌦️',
    'heavy intensity drizzle rain': '🌦️',
    'shower rain and drizzle': '🌦️',
    'heavy shower rain and drizzle': '🌦️',
    'shower drizzle': '🌦️',

    'light rain': '🌦️',
    'moderate rain': '🌧️',
    'heavy intensity rain': '🌧️',
    'very heavy rain': '🌧️',
    'extreme rain': '🌧️',
    'freezing rain': '🌧️',
    'light intensity shower rain': '🌧️',
    'shower rain': '🌧️',
    'heavy intensity shower rain': '🌧️',
    'ragged shower rain': '🌧️',
    'rain': '🌧️',

    'light snow': '❄️',
    'snow': '❄️',
    'heavy snow': '❄️',
    'sleet': '❄️',
    'shower sleet': '🌨️',
    'light rain and snow': '🌨️',
    'rain and snow': '🌨️',
    'light shower snow': '🌨️',
    'shower snow': '🌨️',
    'heavy shower snow': '🌨️',

    'mist': '🌫️',
    'smoke': '🌫️',
    'haze': '🌫️',
    'sand, dust whirls': '🌫️',
    'fog': '🌫️',
    'sand': '🌫️',
    'dust': '🌫️',
    'volcanic ash': '🌋',
    'squalls': '🌫️',
    'tornado': '🌪️',

    'clear sky': '☀️',
    'few clouds': '🌤️',
    'scattered clouds': '🌥️',
    'broken clouds': '☁️',
    'overcast clouds': '☁️'
}


def format_icon(x):
    description = str(x['description'])
    # print(x['description'])
    return icons.get(description, description)


def weather_conditions(query, app_id):
    url = "http://api.openweathermap.org/data/2.5/weather?q=" + query + "&units=metric&APPID=" + app_id
    headers = {
        'User-Agent' : 'ConkyWeatherBot/0.1'
    }
    req = urllib2.Request(url, None, headers)
    # print(url)
    try:
        response = urllib2.urlopen(req)
        j = json.loads(response.read())
        if int(j['cod']) == 200:
            icon_string = ' '.join(map(format_icon, j['weather']))
            location_name = str(j['name'])
            location_temp = str(j['main']['temp']) + '°C'
            return "%s %s" % (icon_string, location_temp)
        else:
            return 'Error getting weather 🌋'
    except urllib2.HTTPError:
        return 'Invalid APP_ID 🌋'


# https://gist.github.com/miklb/ed145757971096565723
# https://en.wikipedia.org/wiki/Lunar_phase#Lunar_phase_calculation
def lunar_phase():
    import math, decimal, datetime
    dec = decimal.Decimal

    def position(now=None):
        if now is None:
            now = datetime.datetime.now()

        diff = now - datetime.datetime(2001, 1, 1)
        days = dec(diff.days) + (dec(diff.seconds) / dec(86400))
        lunations = dec("0.20439731") + (days * dec("0.03386319269"))

        return lunations % dec(1)

    def phase(pos):
        index = (pos * dec(8)) + dec("0.5")
        index = math.floor(index)
        return {
            0: "🌑", # "New Moon"
            1: "🌒", # "Waxing Crescent"
            2: "🌓", # "First Quarter"
            3: "🌔", # "Waxing Gibbous"
            4: "🌕", # "Full Moon"
            5: "🌖", # "Waning Gibbous"
            6: "🌗", # "Last Quarter"
            7: "🌘", # "Waning Crescent
        }[int(index) & 7]

    pos = position()
    phasename = phase(pos)
    roundedpos = round(float(pos), 3)
    return phasename
    # return "%s (%s)" % (phasename, roundedpos)


if __name__ == '__main__':
    if 'CONKY_QUERY' not in os.environ:
        print 'CONKY_QUERY env variable missing 🌋'
        sys.exit(1)
    if 'CONKY_APP_ID' not in os.environ:
        print 'CONKY_APP_ID env variable missing 🌋'
        sys.exit(1)

    query = os.environ['CONKY_QUERY']
    app_id = os.environ['CONKY_APP_ID']

    output = weather_conditions(query, app_id)
    print(output + "" + lunar_phase())
