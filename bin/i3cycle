#!/usr/bin/env python3

import sys
from sys import argv

import i3ipc
import subprocess


def alert(s):
    subcmd = "zenity --notification --text=%s" % s
    subprocess.run(subcmd.split(' '))


def hr(s):
    print ('%s%s' % (s, '-' * (80 - len(s))))


def cycle_window(reverse):
    if focused_window_index is None:
        cycle_workspace(reverse)
        return

    last_index = len(windows) - 1
    target_index = focused_window_index - 1 if reverse else focused_window_index + 1
    target_index = last_index if target_index < 0 else 0 if target_index > last_index else target_index
    print("switching to window index %s" % target_index)
    i3.command('[con_id=%s] focus' % windows[target_index].id)


def cycle_workspace(reverse):
    target_num = focused_workspace_num - 1 if reverse else focused_workspace_num + 1
    target_num = len(workspaces) if target_num == 0 else target_num
    print("switching to workspace_num %s" % target_num)
    i3.command('workspace %s' % target_num)


def ordered_workspaces():
    workspaces = []
    for leaf in tree.leaves():
        if leaf.workspace().num in map(lambda x: x.workspace().num, workspaces):
            continue
        workspaces.append(leaf)

    workspaces = sorted(workspaces, key=lambda w: w.workspace().num)
    focused_workspace_num = tree.find_focused().workspace().num

    focused_workspace_index = None
    for workspace_index, workspace in enumerate(workspaces):
        print("%s - %s" % (workspace_index, workspace.workspace().num))
        if workspace.workspace().num == focused_workspace_num:
            focused_workspace_index = workspace_index

    return workspaces, focused_workspace_index, focused_workspace_num


def ordered_windows():
    windows = []
    focused_window_index = None
    window_index = 0
    for workspace in workspaces:
        for window in workspace.workspace():
            if window.id in map(lambda x: x.id, windows):
                continue
            print("%s - %s - %s - %s" % (window_index, window.id, window.focused, window.name))
            windows.append(window)
            if window.focused:
                focused_window_index = window_index
            window_index += 1

    return windows, focused_window_index


def help():
    print(
"""About:

Cycles through windows/workspaces

%s windows
%s workspaces
Focused window index: %s
Focused workspace index: %s
Focused workspace num: %s

Example usage:

i3cycle window_prev|window_next|workspace_prev|workspace_next
""" % (len(windows), len(workspaces), focused_window_index, focused_workspace_num, focused_workspace_index))

i3 = i3ipc.Connection()
tree = i3.get_tree()

hr('Workspaces')
workspaces, focused_workspace_index, focused_workspace_num = ordered_workspaces()

hr('Windows')
windows, focused_window_index = ordered_windows()

if len(argv) < 2:
    help()
    sys.exit(1)

reverse = 'prev' in argv[1]
cmd = 'window' if 'window' in argv[1] else 'workspace'

if 'window' in argv[1]:
    cycle_window(reverse)
elif 'workspace' in argv[1]:
    cycle_workspace(reverse)
else:
    help()
