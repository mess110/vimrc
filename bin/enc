#!/usr/bin/env ruby

require 'openssl'
require 'digest'
require 'base64'

module Utils
  def pack data
    [data].pack('H*')
  end

  def unpack data
    data.unpack('H*')
  end

  def validate_input(data)
    raise 'input needs to be string' if data.class != String
  end
end

module RSA
  extend Utils

  def self.encrypt(pub_key_path, data)
    validate_input(data)

    expanded_path = File.expand_path(pub_key_path)
    public_key = OpenSSL::PKey::RSA.new(File.read(expanded_path))
    Base64.encode64(public_key.public_encrypt(data))
  end

  def self.decrypt(priv_key_path, data, password = '')
    validate_input(data)

    expanded_path = File.expand_path(priv_key_path)
    private_key = OpenSSL::PKey::RSA.new(File.read(expanded_path), password)
    private_key.private_decrypt(Base64.decode64(data))
  end
end

module AES
  extend Utils

  def self.encrypt(key, data)
    validate_input(data)

    aes = OpenSSL::Cipher.new('AES-256-CBC')
    aes.encrypt
    aes.key = Digest::SHA256.digest(key)
    result = aes.update(data) + aes.final
    unpack(result)
  end

  def self.decrypt(key, data)
    validate_input(data)

    aes = OpenSSL::Cipher.new('AES-256-CBC')
    aes.decrypt
    aes.key = Digest::SHA256.digest(key)
    aes.update(pack(data)) + aes.final
  end

  def self.generate_key
    random_key = OpenSSL::Cipher.new('AES-256-CBC').random_key
    unpack(random_key)[0]
  end
end

def help_aes
  puts <<-HELP_TEXT
AES --------------------------------------------------------------------------------

Example AES usage:

  enc k > ~/.encrc
  enc k > ~/.encrc'
  enc e `cat ~/.encrc` file_path

  enc d key data
  enc k new
  enc k

HELP_TEXT
end

def help_rsa
  puts <<-HELP_TEXT
RSA --------------------------------------------------------------------------------

Automatically picks the private key ~/.ssh/id_rsa and the public key
~/.ssh/id_rsa.pem

If you need to convert your public key from .pub to .pem:

  ssh-keygen -f id_rsa.pub -e -m pem > id_rsa.pem

Example RSA usage:

  enc rsae data
  enc rsad data
  enc rsad password data

HELP_TEXT
end

def help
  puts <<-HELP_TEXT
enc - CLI to facilitate AES/RSA encryption/decryption

HELP_TEXT
  help_aes
  help_rsa
end

encrc_path = File.expand_path('~/.encrc')

case ARGV[0]
when 'wk', 'nk' # write key/new key
  File.write(encrc_path, AES::generate_key)
  puts File.read(encrc_path)
when 'gk' # generate key
  puts AES::generate_key
when 'k' # print key
  puts File.read(encrc_path)
when 'e', 'd' # encrypt/decrypt
  if ARGV.size == 2
    if File.file?(encrc_path)
      ARGV.insert(1, File.read(encrc_path))
    end
  end

  if ARGV.size != 3
    help_aes
    exit 1
  end

  cmd = ARGV[0]
  input_key = ARGV[1]
  input_data = ARGV[2]

  key = File.file?(input_key) ? File.read(input_key) : input_key
  content = File.file?(input_data) ? File.read(input_data) : input_data

  if cmd == 'e'
    puts AES::encrypt(key, content)
  else
    puts AES::decrypt(key, content)
  end
when 'rsae', 'rsad' # rsa encrypt/decrypt
  if ARGV.size == 2
    ARGV.insert(1, nil)
  end

  if ARGV.size != 3
    help_rsa
    exit 1
  end

  cmd = ARGV[0]
  password = ARGV[1]
  input_data = ARGV[2]
  content = File.file?(input_data) ? File.read(input_data) : input_data
  pub_key_path = '~/.ssh/id_rsa.pem'
  priv_key_path = '~/.ssh/id_rsa'

  if cmd == 'rsae'
    puts RSA::encrypt(pub_key_path, content)
  else
    puts RSA::decrypt(priv_key_path, content, password)
  end
else
  help
end
