#!/usr/bin/env ruby

require 'openssl'
require 'digest'
require 'base64'

module Utils
  def pack data
    [data].pack('H*')
  end

  def unpack data
    data.unpack('H*')
  end

  def validate_input(data)
    raise 'input needs to be string' if data.class != String
  end

  def pls_confirm(s)
    print(s)
    result = STDIN.gets.strip.downcase
    ['y', '1', 'yes', 'true'].include?(result)
  end
end

module RSA
  extend Utils

  def self.encrypt(data, pub_key_path)
    validate_input(data)

    expanded_path = File.expand_path(pub_key_path)
    public_key = OpenSSL::PKey::RSA.new(File.read(expanded_path))
    Base64.encode64(public_key.public_encrypt(data))
  end

  def self.decrypt(data, priv_key_path, password = '')
    validate_input(data)

    expanded_path = File.expand_path(priv_key_path)
    private_key = OpenSSL::PKey::RSA.new(File.read(expanded_path), password)
    private_key.private_decrypt(Base64.decode64(data))
  end
end

module AES
  extend Utils

  def self.encrypt(data, key)
    validate_input(data)

    aes = OpenSSL::Cipher.new('AES-256-CBC')
    aes.encrypt
    aes.key = Digest::SHA256.digest(key)
    result = aes.update(data) + aes.final
    unpack(result)
  end

  def self.decrypt(data, key)
    validate_input(data)

    aes = OpenSSL::Cipher.new('AES-256-CBC')
    aes.decrypt
    aes.key = Digest::SHA256.digest(key)
    aes.update(pack(data)) + aes.final
  end

  def self.generate_key
    random_key = OpenSSL::Cipher.new('AES-256-CBC').random_key
    unpack(random_key)[0]
  end
end

module CLI
  extend Utils

  def self.help_aes
    puts <<-HELP_TEXT
AES --------------------------------------------------------------------------------

Example AES usage:

  enc wk # generate and write a new key
  enc gk # generate a key
  enc k  # print the key

  enc e data
  enc d data
  enc e data key
  enc d data key

    HELP_TEXT
  end

  def self.help_rsa
    puts <<-HELP_TEXT
RSA --------------------------------------------------------------------------------

If you need to convert your public key from .pub to .pem:

  ssh-keygen -f id_rsa.pub -e -m pem > id_rsa.pem

Example RSA usage:

  enc rsae data
  enc rsae data public_key_path
  enc rsad data
  enc rsad data private_key_path password

Automatically picks the private key ~/.ssh/id_rsa and the public key
~/.ssh/id_rsa.pem if they are not supplied

    HELP_TEXT
  end

  def self.help
    puts <<-HELP_TEXT
enc - CLI to facilitate AES/RSA encryption/decryption

    HELP_TEXT
    help_aes
    help_rsa
  end

  def self.write_new_key
    if File.exists?(encrc_path) && pls_confirm("Override existing key #{encrc_path}? (y/n)")
      puts "Overriding key #{encrc_path}"
      File.write(encrc_path, AES::generate_key)
    else
      puts "Key #{encrc_path} left intact"
    end
    print_key
  end

  def self.print_key
    puts File.read(encrc_path)
  end

  def self.print_new_key
    puts AES::generate_key
  end

  def self.encrc_path
    File.expand_path('~/.encrc')
  end

  def self.aes_encrypt_decrypt(args)
    if args.size == 2
      if File.file?(encrc_path)
        args.push(File.read(encrc_path))
      end
    end

    if args.size != 3
      help_aes
      exit 1
    end

    input_data = args[1]
    input_key = args[2]

    content = File.file?(input_data) ? File.read(input_data) : input_data
    key = File.file?(input_key) ? File.read(input_key) : input_key

    if args[0] == 'e'
      puts AES::encrypt(content, key)
    else
      puts AES::decrypt(content, key)
    end
  end

  def self.rsa_encrypt_decrypt(args)
    if args.size < 2 || args.size > 4
      help_rsa
      exit 1
    end

    input_data = args[1]
    key_path = args[2]
    password = args[3]

    content = File.file?(input_data) ? File.read(input_data) : input_data

    if args[0] == 'rsae'
      puts RSA::encrypt(content, key_path || '~/.ssh/id_rsa.pem')
    else
      puts RSA::decrypt(content, key_path || '~/.ssh/id_rsa', password)
    end
  end
end

cmd = ARGV[0]
case cmd
when 'wk', 'nk'
  CLI::write_new_key
when 'gk'
  CLI::print_new_key
when 'k'
  CLI::print_key
when 'e', 'd'
  CLI::aes_encrypt_decrypt(ARGV)
when 'rsae', 'rsad'
  CLI::rsa_encrypt_decrypt(ARGV)
else
  CLI::help
end
